package paxos:default;

interface logger {
    enum level {
        debug,
        info,
        warn,
        error,
    }
    // log: func(level: level, msg: string); 

    log-debug: func(msg: string);
    log-info: func(msg: string);
    log-warn: func(msg: string);
    log-error: func(msg: string);
}

interface paxos-coordinator {
    use paxos-types.{run-config, node, slot, ballot, client-request, value, client-response, kv-pair};
    use proposer-types.{prepare-result, accept-result};
    use network-types.{network-message};
    use learner-types.{learned-entry, learn-result};

    record election-result {
        leader: node,
        quorum: u64,
    }

    record paxos-state {
        learned: list<learned-entry>,
        kv-state: list<kv-pair>,
    }

    resource paxos-coordinator-resource {
        constructor(node: node, nodes: list<node>, is-leader: bool, config: run-config);

        /// Optionally, elects a leader.
        elect-leader: func() -> election-result;

        /// Phase 1: Prepare Phase.
        prepare-phase: func() -> prepare-result;
        
        /// Phase 2: Accept Phase.
        accept-phase: func() -> accept-result;
        
        /// Phase 3: Commit Phase.
        commit-phase: func() -> option<list<client-response>>;

        /// Handles network messages.
        handle-message: func(message: network-message) -> network-message;

        /// Expose the current Paxos state (learned results and kv-store).
        get-state: func() -> paxos-state;

        submit-client-request: func(request: value) -> bool;

        is-leader: func() -> bool;

        failure-service: func();

        run-paxos-loop: func() -> option<list<client-response>>;

        send-heartbeat: func();
    } 
}

interface runner {
    use paxos-types.{node, run-config};
    
    resource runner-resource {
    constructor(node: node, nodes: list<node>, is-leader: bool, config: run-config);

    run: func();
    }
}