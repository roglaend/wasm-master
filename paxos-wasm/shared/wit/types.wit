interface paxos-types {
    enum paxos-role {
        coordinator,
        proposer,
        acceptor,
        learner,
    }

    record node {
        node-id: u64,
        address: string,
        role: paxos-role,
    }

    type slot = u64;
    type ballot = u64;

    type cmd = option<string>;
    type cmd-result = option<string>;

    /// Represents the command or operation to be executed.
    record value {
        is-noop: bool,      // Used to fill empty slots if needed. (might not be needed since command can be None)
        command: cmd,   // The actual command, executed by the state machine (if any)
        // Add more...?
        // TODO: Change the value to actually fit the usage of our final state machine.
    }

    record client-request {
        client-id: string,
        client-seq: u32,
        // timestamp: u64,
        value: value,
    }

    record client-response {
        client-id: string,
        client-seq: u32,
        success: bool,
        command-result: cmd-result,
    }

    /// A proposal generated by the leader.
    record proposal {
        slot: slot,
        ballot: ballot,
        client-request: client-request,
    }

    /// Prepare message sent by the proposer to initiate a new proposal.
    /// Acceptors respond to this message with a promise.
    record prepare {
        slot: slot,
        ballot: ballot,
    }

    /// Promise message returned by an acceptor in response to a prepare.
    /// It includes the acceptor's current ballot and any previously accepted proposals.
    record promise {
        ballot: ballot,
        accepted: list<p-value>,
    }

    /// Pâ€‘value represents already accepted proposals from an acceptor. (Change name?)
    record p-value {
        slot: slot,
        ballot: ballot,
        value: option<value>,
    }

    // TODO: Some of these types are identical? Reuse or keep separate for clarity and future expansion?

    /// Accept message sent by the proposer to ask acceptors to accept a proposal.
    record accept {
        slot: slot,
        ballot: ballot,
        value: value,
    }

    /// An accepted response from an acceptor to an accept.
    record accepted {
        slot: u64,
        ballot: u64,
        success: bool,
        value: value
    }

    /// Learn message used by acceptors to notify that a proposal has been chosen,
    /// or by the leader to commit a value.
    record learn {
        slot: slot,
        ballot: ballot,
        value: value,
    }
}

interface proposer-types {
    use paxos-types.{slot, ballot, value, client-request, proposal};
    
    /// Outcome of processing promises.
    record prepare-outcome {
        chosen-value: value,  // The value that should be used.
        is-original: bool,    // True if this is the original client proposal.
    }

    /// Result type for the prepare phase.
    variant prepare-result {
        outcome(prepare-outcome),   // The value outcome of the prepare
        missing-proposal,           // There was no in-flight proposals matching the slot
        quorum-failure,             // Not enough promise responses were received
    }

    /// Result type for the accept phase.
    variant accept-result {
        accepted(u64),          // Quorum of acceptors accepted with the number of acceptances.
        missing-proposal,       // There was no in-flight proposals matching the slot
        quorum-failure,         // Not enough accept responses were received
    }

        /// The overall state of the proposer.
    record proposer-state {
        is-leader: bool,
        num-acceptors: u64,

        current-slot: slot,
        current-ballot: ballot,
        
        pending-client-requests: list<client-request>,  // Queue of pending client requests.
        in-flight: list<proposal>,                      // Tracking state for proposals that are currently in flight.
        last-proposal: option<proposal>,                // Last in-flight proposal
    }
}

interface acceptor-types {
    use paxos-types.{slot, ballot, value};

    record accepted-entry {
        slot: slot,
        ballot: ballot,
        value: value,
    }

    // This record holds the highest ballot promised for a given slot.
    record promise-entry {
        slot: slot,
        ballot: ballot,
    }

    record acceptor-state {
        promises: list<promise-entry>,
        accepted: list<accepted-entry>,
    }

}

interface learner-types {
    use paxos-types.{slot, value};

    // TODO: ballot??

    record learned-entry {
        slot: slot,
        value: value,
    }

    record learner-state {
        learned: list<learned-entry>,
    }
}

interface kv-store-types {
    use paxos-types.{value};

    type key = string;

    record kv-pair {
        key: key,
        value: value,
    }

    // TODO: Have this be as part of the command "cmd" type?

    // Define an operation that can be recorded in the history.
    variant operation {
        set(kv-pair),
        remove(key),
        clear,
    }

}

interface network-types {
    use paxos-types.{paxos-role, node, prepare, promise, accept, accepted, learn};

    variant message-payload {
        ignore,                 // No-op.
        prepare(prepare),       // A prepare request.
        promise(promise),       // A promise response.
        accept(accept),         // An accept request.
        accepted(accepted),     // An accepted response.
        learn(learn),           // A learn request.
        // learn-ack(learn),    // A learn ack. // TODO: Use or not to use, with custom payload? 
        heartbeat(heartbeat),   // Heartbeat.
    }

    record heartbeat {
        sender: node,
        timestamp: u64,
    }

    record network-message {
        sender: node,
        // targets: paxos-role, // TODO: Do we want to specify a specific target group?
        payload: message-payload,
    }

}