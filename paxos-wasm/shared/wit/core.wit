/// The core proposer contains all Paxos logic for proposals.
interface proposer {
    use paxos-types.{run-config, slot, ballot, value, client-request, prepare, promise, accept, proposal, accepted, learn};
    use proposer-types.{prepare-result, accept-result, proposer-state, proposal-status};

    resource proposer-resource {
        /// Constructs a new proposer with an initial ballot, number of acceptors, and leadership flag.
        constructor(is-leader: bool, num-acceptors: u64, init-ballot: ballot, node-id: string, config: run-config);

        /// Returns the current state of the proposer.
        get-state: func() -> proposer-state;

        /// Enqueues a client request for later processing.
        enqueue-client-request: func(request: value) -> bool;

        /// Enqueues a prioritized request.
        enqueue-prioritized-request: func(request: value);

        get-current-slot: func() -> slot;

        get-current-ballot: func() -> ballot;

        get-adu: func() -> slot;

        set-adu: func(adu: slot);

        /// Gets a proposal depending on its ProposerStatus
        get-proposal-by-status: func(slot: slot, ps: proposal-status) -> option<proposal>;

        /// Reserves the next chosen proposal, setting the proposals status from Chosen to CommitPending
        reserve-next-chosen-proposal: func() -> option<proposal>;

        /// Creates the next proposal from the pending queue (if available).
        create-proposal: func() -> option<proposal>;

        /// Processes a complete set of promise responses for a given slot.
        process-prepare: func(slot: slot, promises: list<promise>) -> prepare-result;

        /// Processes a complete set of accepted responses for a given slot.
        process-accept: func(slot: slot, accepts: list<accepted>) -> accept-result;

        /// Marks the proposal as chosen when accepted by a quorum of acceptors
        mark-proposal-chosen: func(slot: slot ) -> option<value>;

        /// Finalizes the proposal after learner execution
        mark-proposal-finalized: func(slot: slot) -> option<value>;

        // Increases ballot and returns it
        increase-ballot: func() -> ballot;

        // If the proposer is leader.
        is-leader: func() -> bool;

        /// Transitions this proposer into leader mode.
        become-leader: func() -> bool;

        /// Relinquishes leadership.
        resign-leader: func() -> bool;

        load-state: func() -> result<_, string>;

        maybe-flush: func() -> result<_, string>;
    }
}

interface acceptor {
    use paxos-types.{run-config, slot, ballot, value, prepare, promise, accept, accepted, learn};
    use acceptor-types.{promise-result, accepted-result, acceptor-state, p-value};

    resource acceptor-resource {
        constructor(node-id: string, config: run-config);
        get-state: func() -> acceptor-state;
        prepare: func(slot: slot, ballot: ballot) -> promise-result;
        accept: func(slot: slot, ballot: ballot, value: value) -> accepted-result;
        get-accepted: func(slot: slot) -> option<p-value>;
        load-state: func() -> result<_, string>;
        maybe-flush: func() -> result<_, string>;
    }
}

interface learner {
    use paxos-types.{run-config, slot, value, learn};
    use network-types.{node};
    use learner-types.{learned-entry, learner-state, learn-result};

    resource learner-resource {
        constructor(num-acceptors: u64, node-id: string, config: run-config);
        get-state: func() -> learner-state;
        learn: func(slot: slot, value: value) -> bool;
        handle-learn: func(learn: learn, sender: node) -> bool;
        to-be-executed: func() -> learn-result;
        get-highest-learned: func() -> slot;
        get-adu: func() -> slot;
        get-learned: func(slot: slot) -> option<learned-entry>;
        load-state: func() -> result<_, string>;
        maybe-flush: func() -> result<_, string>;
    }
}

interface kv-store {
    use paxos-types.{kv-pair, cmd, cmd-result};

    resource kv-store-resource {
        constructor();
        apply: func(cmd: cmd) -> cmd-result;
        get-state: func() -> list<kv-pair>;
        get-history: func() -> list<cmd>;
    }
}

interface failure-detector {
    use paxos-types.{node};

    resource failure-detector-resource {
        constructor(node: node, nodes: list<node>, delta: u64);
        checker: func() -> option<u64>;
        heartbeat: func(node: u64);
        alive-nodes: func() -> list<u64>;
    }   
}

interface leader-detector {
    use paxos-types.{node};

    resource leader-detector-resource {
        constructor(nodes: list<node>, node: node);
        suspect: func(node: u64) -> option<u64>;
        restore: func(node: u64) -> option<u64>;
    }
}

interface storage {
    type bytes = list<u8>;
    type state-and-changes = tuple<list<bytes>, list<bytes>>;
  
    resource storage-resource {
        /// key = "state/<key>/..", max_snapshots = N
        constructor(key: string, max-snapshots: u64);

        /// overwrite or create “snapshot-current.bin”
        save-state: func(state: bytes) -> result<_, string>;
        /// read back “snapshot-current.bin”
        load-state: func() -> result<bytes, string>;
        /// fsync the current snapshot file + its directory
        flush-state: func() -> result<_, string>;

        /// append one change‐record
        save-change: func(change: bytes) -> result<_, string>;
        /// push the writer’s buffer all the way to disk
        flush-changes: func() -> result<_, string>;

        /// atomically write “snapshot-<timestamp>.bin” then truncate changelog
        checkpoint: func(state: bytes, timestamp: string) -> result<_, string>;
        /// return [ snapshot-<x1>.bin, …, snapshot-<xN>.bin ] in timestamp order
        list-snapshots: func() -> list<string>;
        /// delete oldest until ≤ retain
        prune-snapshots: func(retain: u64) -> result<_, string>;

        /// load N archived snapshots, then the changelog
        load-state-and-changes: func(num-snapshots: u64) -> result<state-and-changes, string>;

        // Delete the contents of "state/<key>/.."
        delete: func() -> bool;
    }
  }
  