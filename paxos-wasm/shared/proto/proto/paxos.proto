syntax = "proto3";

package paxos;

// Paxos role information.
enum PaxosRole {
  COORDINATOR = 0;
  PROPOSER = 1;
  ACCEPTOR = 2;
  LEARNER = 3;
}

// Node information.
message Node {
  uint64 node_id = 1;
  string address = 2;
  PaxosRole role = 3;
}

// Represents the command or operation to be executed.
message Value {
  bool is_noop = 1;       // True if this is a no-op.
  string command = 2;     // The actual command; empty if none.
}

// Client request and response.
message ClientRequest {
  string client_id = 1;
  uint32 client_seq = 2;
  Value value = 3;
}

message ClientResponse {
  string client_id = 1;
  uint32 client_seq = 2;
  bool success = 3;
  string command_result = 4;
}

// Proposal generated by the leader.
message Proposal {
  uint64 slot = 1;
  uint64 ballot = 2;
  ClientRequest client_request = 3;
}

// Prepare message sent by the proposer.
message PreparePayload {
  uint64 slot = 1;
  uint64 ballot = 2;
}

// PValue represents already accepted proposals from an acceptor.
message PValue {
  uint64 slot = 1;
  uint64 ballot = 2;
  Value value = 3;
}

// Promise message returned by an acceptor.
message PromisePayload {
  uint64 ballot = 1;
  repeated PValue accepted = 2;
}

// Accept message sent by the proposer.
message AcceptPayload {
  uint64 slot = 1;
  uint64 ballot = 2;
  Value value = 3;
}

// Accepted response from an acceptor.
message AcceptedPayload {
  uint64 slot = 1;
  uint64 ballot = 2;
  bool success = 3;
}

// Learn message used to notify that a proposal has been chosen.
message LearnPayload {
  uint64 slot = 1;
  uint64 ballot = 2;
  Value value = 3;
}

// Heartbeat message.
message HeartbeatPayload {
  uint64 timestamp = 1;
}

// Empty message.
message Empty {}

// Top-level network message.
message NetworkMessage {
  enum NetworkMessageKind {
    PREPARE = 0;
    PROMISE = 1;
    ACCEPT = 2;
    ACCEPTED = 3;
    LEARN = 4;
    HEARTBEAT = 5;
    IGNORE = 6;
  }
  Node sender = 1;
  NetworkMessageKind kind = 2;
  oneof payload {
    PreparePayload prepare = 3;
    PromisePayload promise = 4;
    AcceptPayload accept = 5;
    AcceptedPayload accepted = 6;
    LearnPayload learn = 7;
    HeartbeatPayload heartbeat = 8;
    Empty ignore = 9;
  }
}

// Network response includes sender info, status, and payload.
message NetworkResponse {
  enum StatusKind {
    SUCCESS = 0;
    FAILURE = 1;
    IGNORED = 2;
  }
  Node sender = 1;
  NetworkMessage.NetworkMessageKind kind = 2;
  oneof payload {
    PreparePayload prepare = 3;
    PromisePayload promise = 4;
    AcceptPayload accept = 5;
    AcceptedPayload accepted = 6;
    LearnPayload learn = 7;
    HeartbeatPayload heartbeat = 8;
    Empty ignore = 9;
  }
  StatusKind status = 10;
}

// Learned entry and state reporting.
message LearnedEntry {
  uint64 slot = 1;
  Value value = 2;
}

message KvPair {
  string key = 1;
  Value value = 2;
}

message PaxosState {
  repeated LearnedEntry learned = 1;
  repeated KvPair kv_state = 2;
}

// RPC service definitions.
service Paxos {
  // Propose a new value.
  rpc ProposeValue (ProposeRequest) returns (ProposeResponse);
  // Deliver a network message.
  rpc DeliverMessage (NetworkMessage) returns (NetworkResponse);
  // Retrieve the currently learned value.
  rpc GetValue (Empty) returns (GetValueResponse);
  // Retrieve the complete Paxos state.
  rpc GetState (Empty) returns (PaxosState);
  // Retrieve logs incrementally.
  rpc GetLogs (GetLogsRequest) returns (GetLogsResponse);
}

message ProposeRequest {
  string value = 1;
}

message ProposeResponse {
  bool success = 1;
}

message GetValueResponse {
  Value value = 1;
}

message GetLogsRequest {
  uint64 last_offset = 1;
}

message LogEntry {
  uint64 offset = 1;
  string message = 2;
}

message GetLogsResponse {
  repeated LogEntry entries = 1;
  uint64 new_offset = 2;
}
